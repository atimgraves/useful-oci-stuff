#!/bin/bash -f
# Process the settings
TS=`date -u "+%Y-%m-%d-%H-%M-%S"`
K8SSECRET=$1
K8SNAMESPACE=$2
LB_OCID=$3
LB_CERT=$4
LB_LISTENER_NAME=$5
LB_LISTENER_PORT=$6
LB_LISTENER_PROTOCOL=$7
LB_BACKEND_SET=$8
CERT_NAME=$LB_CERT"-"$TS
CERT_CERT_FILE=$CERT_NAME".cert"
CERT_KEY_FILE=$CERT_NAME".key"

# Extract the certificates from Kubernetes
echo Retrieving Certificate $K8SSECRET from Kubernetes namespace $K8SNAMESPACE into $CERT_CERT_FILE
kubectl get secret $K8SSECRET -n $K8SNAMESPACE -o jsonpath='{.data.tls\.crt}' | base64 --decode > $CERT_CERT_FILE
echo Retrieving Private Key $K8SSECRET from Kubernetes namespace $K8SNAMESPACE into $CERT_KEY_FILE
kubectl get secret $K8SSECRET -n $K8SNAMESPACE -o jsonpath='{.data.tls\.key}' | base64 --decode > $CERT_KEY_FILE

# Upload the new one to OCI
echo Creating certificate $CERT_NAME in OCI and waiting for operation to complete
oci lb certificate create --load-balancer-id=$LB_OCID --certificate-name $CERT_NAME  --public-certificate-file $CERT_CERT_FILE  --private-key-file $CERT_KEY_FILE --wait-for-state SUCCEEDED --wait-for-state FAILED

# Apply the new cert
echo Updating listener $LB_LISTENER_NAME to use cert $CERT_NAME
oci lb listener update --load-balancer-id=$LB_OCID --listener-name=$LB_LISTENER_NAME  --default-backend-set-name=$LB_BACKEND_SET --port $LB_LISTENER_PORT --protocol $LB_LISTENER_PROTOCOL --ssl-certificate-name $CERT_NAME  --wait-for-state SUCCEEDED --wait-for-state FAILED